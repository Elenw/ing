//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace Sakuno.ING.Game.Models.MasterData
{
    public partial class ShipInfo : Calculated<ShipInfoId, IRawShipInfo>
    {
        public ShipInfo(ShipInfoId id, MasterDataRoot owner) : base(id)
        {
            this.owner = owner;
            Introduction.Translation = owner.Localization?.GetLocalized("ShipIntro", id.ToString());
            CreateDummy();
        }

        public ShipInfo(IRawShipInfo raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly MasterDataRoot owner;

        public TextTranslationGroup Introduction { get; } = new TextTranslationGroup();

        private int _sortNo;
        public int SortNo
        {
            get => _sortNo;
            internal set => Set(ref _sortNo, value);
        }

        private bool _isAbyssal;
        public bool IsAbyssal
        {
            get => _isAbyssal;
            internal set => Set(ref _isAbyssal, value);
        }

        private ShipTypeInfo _type;
        public ShipTypeInfo Type
        {
            get => _type;
            internal set => Set(ref _type, value);
        }

        private int _classId;
        public int ClassId
        {
            get => _classId;
            internal set => Set(ref _classId, value);
        }

        private bool _canUpgrade;
        public bool CanUpgrade
        {
            get => _canUpgrade;
            internal set => Set(ref _canUpgrade, value);
        }

        private ShipInfo _upgradeTo;
        public ShipInfo UpgradeTo
        {
            get => _upgradeTo;
            internal set => Set(ref _upgradeTo, value);
        }

        private Materials _upgradeConsumption;
        public Materials UpgradeConsumption
        {
            get => _upgradeConsumption;
            internal set => Set(ref _upgradeConsumption, value);
        }

        private IReadOnlyCollection<ItemRecord> _upgradeSpecialConsumption;
        public IReadOnlyCollection<ItemRecord> UpgradeSpecialConsumption
        {
            get => _upgradeSpecialConsumption;
            internal set => Set(ref _upgradeSpecialConsumption, value);
        }

        private ShipMordenizationStatus _hP;
        public ShipMordenizationStatus HP
        {
            get => _hP;
            internal set => Set(ref _hP, value);
        }

        private ShipMordenizationStatus _armor;
        public ShipMordenizationStatus Armor
        {
            get => _armor;
            internal set => Set(ref _armor, value);
        }

        private ShipMordenizationStatus _firepower;
        public ShipMordenizationStatus Firepower
        {
            get => _firepower;
            internal set => Set(ref _firepower, value);
        }

        private ShipMordenizationStatus _torpedo;
        public ShipMordenizationStatus Torpedo
        {
            get => _torpedo;
            internal set => Set(ref _torpedo, value);
        }

        private ShipMordenizationStatus _antiAir;
        public ShipMordenizationStatus AntiAir
        {
            get => _antiAir;
            internal set => Set(ref _antiAir, value);
        }

        private ShipMordenizationStatus _luck;
        public ShipMordenizationStatus Luck
        {
            get => _luck;
            internal set => Set(ref _luck, value);
        }

        private ShipSpeed _speed;
        public ShipSpeed Speed
        {
            get => _speed;
            internal set => Set(ref _speed, value);
        }

        private FireRange _fireRange;
        public FireRange FireRange
        {
            get => _fireRange;
            internal set => Set(ref _fireRange, value);
        }

        private int _slotCount;
        public int SlotCount
        {
            get => _slotCount;
            internal set => Set(ref _slotCount, value);
        }

        private IReadOnlyList<int> _aircraft;
        public IReadOnlyList<int> Aircraft
        {
            get => _aircraft;
            internal set => Set(ref _aircraft, value);
        }

        private int? _totalAircraft;
        public int? TotalAircraft
        {
            get => _totalAircraft;
            internal set => Set(ref _totalAircraft, value);
        }

        private int _rarity;
        public int Rarity
        {
            get => _rarity;
            internal set => Set(ref _rarity, value);
        }

        private Materials _dismantleAcquirement;
        public Materials DismantleAcquirement
        {
            get => _dismantleAcquirement;
            internal set => Set(ref _dismantleAcquirement, value);
        }

        private TimeSpan _constructionTime;
        public TimeSpan ConstructionTime
        {
            get => _constructionTime;
            internal set => Set(ref _constructionTime, value);
        }

        private IReadOnlyList<int> _powerupWorth;
        public IReadOnlyList<int> PowerupWorth
        {
            get => _powerupWorth;
            internal set => Set(ref _powerupWorth, value);
        }

        private int _fuelConsumption;
        public int FuelConsumption
        {
            get => _fuelConsumption;
            internal set => Set(ref _fuelConsumption, value);
        }

        private int _bulletConsumption;
        public int BulletConsumption
        {
            get => _bulletConsumption;
            internal set => Set(ref _bulletConsumption, value);
        }

        public event Action<ShipInfo, IRawShipInfo, DateTimeOffset> Updating;
        public override void Update(IRawShipInfo raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(IRawShipInfo raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Introduction != Introduction.Origin)
            {
                Introduction.Origin = raw.Introduction;
                NotifyPropertyChanged(nameof(Introduction));
            }

            SortNo = raw.SortNo;
            IsAbyssal = raw.IsAbyssal;
            ClassId = raw.ClassId;
            UpgradeConsumption = raw.UpgradeConsumption;
            UpgradeSpecialConsumption = raw.UpgradeSpecialConsumption;
            HP = raw.HP;
            Armor = raw.Armor;
            Firepower = raw.Firepower;
            Torpedo = raw.Torpedo;
            AntiAir = raw.AntiAir;
            Luck = raw.Luck;
            Speed = raw.Speed;
            FireRange = raw.FireRange;
            SlotCount = raw.SlotCount;
            Aircraft = raw.Aircraft;
            Rarity = raw.Rarity;
            DismantleAcquirement = raw.DismantleAcquirement;
            ConstructionTime = raw.ConstructionTime;
            PowerupWorth = raw.PowerupWorth;
            FuelConsumption = raw.FuelConsumption;
            BulletConsumption = raw.BulletConsumption;

            UpdateCore(raw, timeStamp);
        }
        partial void UpdateCore(IRawShipInfo raw, DateTimeOffset timeStamp);
        partial void CreateDummy();

    }
    public partial class ShipTypeInfo : Calculated<ShipTypeId, IRawShipTypeInfo>
    {
        public ShipTypeInfo(ShipTypeId id, MasterDataRoot owner) : base(id)
        {
            this.owner = owner;
            CreateDummy();
        }

        public ShipTypeInfo(IRawShipTypeInfo raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly MasterDataRoot owner;

        private int _sortNo;
        public int SortNo
        {
            get => _sortNo;
            internal set => Set(ref _sortNo, value);
        }

        private int _repairTimeRatio;
        public int RepairTimeRatio
        {
            get => _repairTimeRatio;
            internal set => Set(ref _repairTimeRatio, value);
        }

        private int _buildOutlineId;
        public int BuildOutlineId
        {
            get => _buildOutlineId;
            internal set => Set(ref _buildOutlineId, value);
        }

        public event Action<ShipTypeInfo, IRawShipTypeInfo, DateTimeOffset> Updating;
        public override void Update(IRawShipTypeInfo raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(IRawShipTypeInfo raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            SortNo = raw.SortNo;
            RepairTimeRatio = raw.RepairTimeRatio;
            BuildOutlineId = raw.BuildOutlineId;

            UpdateCore(raw, timeStamp);
        }
        partial void UpdateCore(IRawShipTypeInfo raw, DateTimeOffset timeStamp);
        partial void CreateDummy();

        private readonly BindableSnapshotCollection<EquipmentTypeInfo> availableEquipmentTypes = new BindableSnapshotCollection<EquipmentTypeInfo>();
        public IReadOnlyList<EquipmentTypeInfo> AvailableEquipmentTypes => availableEquipmentTypes;

    }
    public partial class EquipmentTypeInfo : Calculated<EquipmentTypeId, IRawEquipmentTypeInfo>
    {
        public EquipmentTypeInfo(EquipmentTypeId id, MasterDataRoot owner) : base(id)
        {
            this.owner = owner;
            Name.Translation = owner.Localization?.GetLocalized("EquipType", id.ToString());
            CreateDummy();
        }

        public EquipmentTypeInfo(IRawEquipmentTypeInfo raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly MasterDataRoot owner;

        public TextTranslationGroup Name { get; } = new TextTranslationGroup();

        private bool _availableInExtraSlot;
        public bool AvailableInExtraSlot
        {
            get => _availableInExtraSlot;
            internal set => Set(ref _availableInExtraSlot, value);
        }

        public event Action<EquipmentTypeInfo, IRawEquipmentTypeInfo, DateTimeOffset> Updating;
        public override void Update(IRawEquipmentTypeInfo raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(IRawEquipmentTypeInfo raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Name != Name.Origin)
            {
                Name.Origin = raw.Name;
                NotifyPropertyChanged(nameof(Name));
            }

            AvailableInExtraSlot = raw.AvailableInExtraSlot;

            UpdateCore(raw, timeStamp);
        }
        partial void UpdateCore(IRawEquipmentTypeInfo raw, DateTimeOffset timeStamp);
        partial void CreateDummy();

        public override string ToString() => $"EquipmentTypeInfo {Id}: {Name.Origin}";
    }
    public partial class EquipmentInfo : Calculated<EquipmentInfoId, IRawEquipmentInfo>
    {
        public EquipmentInfo(EquipmentInfoId id, MasterDataRoot owner) : base(id)
        {
            this.owner = owner;
            Name.Translation = owner.Localization?.GetLocalized("EquipName", id.ToString());
            Description.Translation = owner.Localization?.GetLocalized("EquipDesc", id.ToString());
            CreateDummy();
        }

        public EquipmentInfo(IRawEquipmentInfo raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly MasterDataRoot owner;

        public TextTranslationGroup Name { get; } = new TextTranslationGroup();

        public TextTranslationGroup Description { get; } = new TextTranslationGroup();

        private EquipmentTypeInfo _type;
        public EquipmentTypeInfo Type
        {
            get => _type;
            internal set => Set(ref _type, value);
        }

        private int _iconId;
        public int IconId
        {
            get => _iconId;
            internal set => Set(ref _iconId, value);
        }

        private int _firepower;
        public int Firepower
        {
            get => _firepower;
            internal set => Set(ref _firepower, value);
        }

        private int _torpedo;
        public int Torpedo
        {
            get => _torpedo;
            internal set => Set(ref _torpedo, value);
        }

        private int _antiAir;
        public int AntiAir
        {
            get => _antiAir;
            internal set => Set(ref _antiAir, value);
        }

        private int _armor;
        public int Armor
        {
            get => _armor;
            internal set => Set(ref _armor, value);
        }

        private int _diveBomberAttack;
        public int DiveBomberAttack
        {
            get => _diveBomberAttack;
            internal set => Set(ref _diveBomberAttack, value);
        }

        private int _antiSubmarine;
        public int AntiSubmarine
        {
            get => _antiSubmarine;
            internal set => Set(ref _antiSubmarine, value);
        }

        private int _accuracy;
        public int Accuracy
        {
            get => _accuracy;
            internal set => Set(ref _accuracy, value);
        }

        private int _evasion;
        public int Evasion
        {
            get => _evasion;
            internal set => Set(ref _evasion, value);
        }

        private int _antiBomber;
        public int AntiBomber
        {
            get => _antiBomber;
            internal set => Set(ref _antiBomber, value);
        }

        private int _interception;
        public int Interception
        {
            get => _interception;
            internal set => Set(ref _interception, value);
        }

        private int _lightOfSight;
        public int LightOfSight
        {
            get => _lightOfSight;
            internal set => Set(ref _lightOfSight, value);
        }

        private FireRange _fireRange;
        public FireRange FireRange
        {
            get => _fireRange;
            internal set => Set(ref _fireRange, value);
        }

        private int _flightRadius;
        public int FlightRadius
        {
            get => _flightRadius;
            internal set => Set(ref _flightRadius, value);
        }

        private Materials _deploymentConsumption;
        public Materials DeploymentConsumption
        {
            get => _deploymentConsumption;
            internal set => Set(ref _deploymentConsumption, value);
        }

        private Materials _dismantleAcquirement;
        public Materials DismantleAcquirement
        {
            get => _dismantleAcquirement;
            internal set => Set(ref _dismantleAcquirement, value);
        }

        private int _rarity;
        public int Rarity
        {
            get => _rarity;
            internal set => Set(ref _rarity, value);
        }

        public event Action<EquipmentInfo, IRawEquipmentInfo, DateTimeOffset> Updating;
        public override void Update(IRawEquipmentInfo raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(IRawEquipmentInfo raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Name != Name.Origin)
            {
                Name.Origin = raw.Name;
                NotifyPropertyChanged(nameof(Name));
            }

            if (raw.Description != Description.Origin)
            {
                Description.Origin = raw.Description;
                NotifyPropertyChanged(nameof(Description));
            }

            IconId = raw.IconId;
            Firepower = raw.Firepower;
            Torpedo = raw.Torpedo;
            AntiAir = raw.AntiAir;
            Armor = raw.Armor;
            DiveBomberAttack = raw.DiveBomberAttack;
            AntiSubmarine = raw.AntiSubmarine;
            Accuracy = raw.Accuracy;
            Evasion = raw.Evasion;
            AntiBomber = raw.AntiBomber;
            Interception = raw.Interception;
            LightOfSight = raw.LightOfSight;
            FireRange = raw.FireRange;
            FlightRadius = raw.FlightRadius;
            DeploymentConsumption = raw.DeploymentConsumption;
            DismantleAcquirement = raw.DismantleAcquirement;
            Rarity = raw.Rarity;

            UpdateCore(raw, timeStamp);
        }
        partial void UpdateCore(IRawEquipmentInfo raw, DateTimeOffset timeStamp);
        partial void CreateDummy();

        private readonly BindableSnapshotCollection<ShipInfo> extraSlotAcceptingShips = new BindableSnapshotCollection<ShipInfo>();
        public IReadOnlyList<ShipInfo> ExtraSlotAcceptingShips => extraSlotAcceptingShips;

        public override string ToString() => $"EquipmentInfo {Id}: {Name.Origin}";
    }
    public partial class UseItemInfo : Calculated<UseItemId, IRawUseItem>
    {
        public UseItemInfo(UseItemId id, MasterDataRoot owner) : base(id)
        {
            this.owner = owner;
            Name.Translation = owner.Localization?.GetLocalized("UseItem", id.ToString());
            CreateDummy();
        }

        public UseItemInfo(IRawUseItem raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly MasterDataRoot owner;

        public TextTranslationGroup Name { get; } = new TextTranslationGroup();

        public event Action<UseItemInfo, IRawUseItem, DateTimeOffset> Updating;
        public override void Update(IRawUseItem raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(IRawUseItem raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Name != Name.Origin)
            {
                Name.Origin = raw.Name;
                NotifyPropertyChanged(nameof(Name));
            }


            UpdateCore(raw, timeStamp);
        }
        partial void UpdateCore(IRawUseItem raw, DateTimeOffset timeStamp);
        partial void CreateDummy();

        public override string ToString() => $"UseItemInfo {Id}: {Name.Origin}";
    }
    public partial class MapAreaInfo : Calculated<MapAreaId, IRawMapArea>
    {
        public MapAreaInfo(MapAreaId id, MasterDataRoot owner) : base(id)
        {
            this.owner = owner;
            Name.Translation = owner.Localization?.GetLocalized("MapArea", id.ToString());
            CreateDummy();
        }

        public MapAreaInfo(IRawMapArea raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly MasterDataRoot owner;

        public TextTranslationGroup Name { get; } = new TextTranslationGroup();

        private bool _isEvent;
        public bool IsEvent
        {
            get => _isEvent;
            internal set => Set(ref _isEvent, value);
        }

        public event Action<MapAreaInfo, IRawMapArea, DateTimeOffset> Updating;
        public override void Update(IRawMapArea raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(IRawMapArea raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Name != Name.Origin)
            {
                Name.Origin = raw.Name;
                NotifyPropertyChanged(nameof(Name));
            }

            IsEvent = raw.IsEvent;

            UpdateCore(raw, timeStamp);
        }
        partial void UpdateCore(IRawMapArea raw, DateTimeOffset timeStamp);
        partial void CreateDummy();

        public override string ToString() => $"MapAreaInfo {Id}: {Name.Origin}";
    }
    public partial class MapInfo : Calculated<MapId, IRawMapInfo>
    {
        public MapInfo(MapId id, MasterDataRoot owner) : base(id)
        {
            this.owner = owner;
            Name.Translation = owner.Localization?.GetLocalized("MapName", id.ToString());
            OperationName.Translation = owner.Localization?.GetLocalized("MapOperation", id.ToString());
            Description.Translation = owner.Localization?.GetLocalized("MapDescription", id.ToString());
            CreateDummy();
        }

        public MapInfo(IRawMapInfo raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly MasterDataRoot owner;

        public TextTranslationGroup Name { get; } = new TextTranslationGroup();

        public TextTranslationGroup OperationName { get; } = new TextTranslationGroup();

        public TextTranslationGroup Description { get; } = new TextTranslationGroup();

        private MapAreaInfo _mapArea;
        public MapAreaInfo MapArea
        {
            get => _mapArea;
            internal set => Set(ref _mapArea, value);
        }

        private int _starDifficulty;
        public int StarDifficulty
        {
            get => _starDifficulty;
            internal set => Set(ref _starDifficulty, value);
        }

        private int? _requiredDefeatCount;
        public int? RequiredDefeatCount
        {
            get => _requiredDefeatCount;
            internal set => Set(ref _requiredDefeatCount, value);
        }

        private IReadOnlyCollection<FleetType> _availableFleetTypes;
        public IReadOnlyCollection<FleetType> AvailableFleetTypes
        {
            get => _availableFleetTypes;
            internal set => Set(ref _availableFleetTypes, value);
        }

        private IRawMapBgmInfo _bgmInfo;
        public IRawMapBgmInfo BgmInfo
        {
            get => _bgmInfo;
            internal set => Set(ref _bgmInfo, value);
        }

        public event Action<MapInfo, IRawMapInfo, DateTimeOffset> Updating;
        public override void Update(IRawMapInfo raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(IRawMapInfo raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Name != Name.Origin)
            {
                Name.Origin = raw.Name;
                NotifyPropertyChanged(nameof(Name));
            }

            if (raw.OperationName != OperationName.Origin)
            {
                OperationName.Origin = raw.OperationName;
                NotifyPropertyChanged(nameof(OperationName));
            }

            if (raw.Description != Description.Origin)
            {
                Description.Origin = raw.Description;
                NotifyPropertyChanged(nameof(Description));
            }

            StarDifficulty = raw.StarDifficulty;
            RequiredDefeatCount = raw.RequiredDefeatCount;
            AvailableFleetTypes = raw.AvailableFleetTypes;
            BgmInfo = raw.BgmInfo;

            UpdateCore(raw, timeStamp);
        }
        partial void UpdateCore(IRawMapInfo raw, DateTimeOffset timeStamp);
        partial void CreateDummy();

        private readonly BindableSnapshotCollection<UseItemInfo> itemAcquirements = new BindableSnapshotCollection<UseItemInfo>();
        public IReadOnlyList<UseItemInfo> ItemAcquirements => itemAcquirements;

        public override string ToString() => $"MapInfo {Id}: {Name.Origin}";
    }
    public partial class ExpeditionInfo : Calculated<ExpeditionId, IRawExpeditionInfo>
    {
        public ExpeditionInfo(ExpeditionId id, MasterDataRoot owner) : base(id)
        {
            this.owner = owner;
            Name.Translation = owner.Localization?.GetLocalized("ExpeditionName", id.ToString());
            Description.Translation = owner.Localization?.GetLocalized("ExpeditionDesc", id.ToString());
            CreateDummy();
        }

        public ExpeditionInfo(IRawExpeditionInfo raw, MasterDataRoot owner, DateTimeOffset timeStamp) : this(raw.Id, owner) => UpdateProps(raw, timeStamp);

        private readonly MasterDataRoot owner;

        public TextTranslationGroup Name { get; } = new TextTranslationGroup();

        public TextTranslationGroup Description { get; } = new TextTranslationGroup();

        private string _displayId;
        public string DisplayId
        {
            get => _displayId;
            internal set => Set(ref _displayId, value);
        }

        private MapAreaInfo _mapArea;
        public MapAreaInfo MapArea
        {
            get => _mapArea;
            internal set => Set(ref _mapArea, value);
        }

        private TimeSpan _duration;
        public TimeSpan Duration
        {
            get => _duration;
            internal set => Set(ref _duration, value);
        }

        private int _requiredShipCount;
        public int RequiredShipCount
        {
            get => _requiredShipCount;
            internal set => Set(ref _requiredShipCount, value);
        }

        private int _difficulty;
        public int Difficulty
        {
            get => _difficulty;
            internal set => Set(ref _difficulty, value);
        }

        private double _fuelConsumption;
        public double FuelConsumption
        {
            get => _fuelConsumption;
            internal set => Set(ref _fuelConsumption, value);
        }

        private double _bulletConsumption;
        public double BulletConsumption
        {
            get => _bulletConsumption;
            internal set => Set(ref _bulletConsumption, value);
        }

        private ItemRecord? _rewardItem1;
        public ItemRecord? RewardItem1
        {
            get => _rewardItem1;
            internal set => Set(ref _rewardItem1, value);
        }

        private ItemRecord? _rewardItem2;
        public ItemRecord? RewardItem2
        {
            get => _rewardItem2;
            internal set => Set(ref _rewardItem2, value);
        }

        private bool _canRecall;
        public bool CanRecall
        {
            get => _canRecall;
            internal set => Set(ref _canRecall, value);
        }

        public event Action<ExpeditionInfo, IRawExpeditionInfo, DateTimeOffset> Updating;
        public override void Update(IRawExpeditionInfo raw, DateTimeOffset timeStamp)
        {
            Updating?.Invoke(this, raw, timeStamp);
            UpdateProps(raw, timeStamp);
        }

        private void UpdateProps(IRawExpeditionInfo raw, DateTimeOffset timeStamp)
        {
            UpdationTime = timeStamp;

            if (raw.Name != Name.Origin)
            {
                Name.Origin = raw.Name;
                NotifyPropertyChanged(nameof(Name));
            }

            if (raw.Description != Description.Origin)
            {
                Description.Origin = raw.Description;
                NotifyPropertyChanged(nameof(Description));
            }

            DisplayId = raw.DisplayId;
            Duration = raw.Duration;
            RequiredShipCount = raw.RequiredShipCount;
            Difficulty = raw.Difficulty;
            FuelConsumption = raw.FuelConsumption;
            BulletConsumption = raw.BulletConsumption;
            RewardItem1 = raw.RewardItem1;
            RewardItem2 = raw.RewardItem2;
            CanRecall = raw.CanRecall;

            UpdateCore(raw, timeStamp);
        }
        partial void UpdateCore(IRawExpeditionInfo raw, DateTimeOffset timeStamp);
        partial void CreateDummy();

        public override string ToString() => $"ExpeditionInfo {Id}: {Name.Origin}";
    }
}
